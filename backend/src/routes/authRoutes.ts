import express from 'express';
import { register, verify, login } from '../controllers/authController';
import { verifyToken } from '../middlewares/authMiddleware';

const router = express.Router();

// Route d'inscription
router.post('/register', register);

// Route de v√©rification d'email
router.post('/verify', verify);

// Route de connexion
router.post('/login', login);

// Route pour r√©cup√©rer les informations de l'utilisateur connect√©
router.get('/me', verifyToken, async (req, res) => {
  try {
    // L'utilisateur est d√©j√† attach√© √† la requ√™te par le middleware verifyToken
    // @ts-ignore - Nous savons que req.user est d√©fini gr√¢ce au middleware
    const user = req.user;
    
    if (!user) {
      return res.status(404).json({ message: "Utilisateur non trouv√©" });
    }
    
    // Ne pas renvoyer de donn√©es sensibles comme le mot de passe
    const { password, verificationCode, ...userWithoutSensitiveData } = user;
    
    res.json(userWithoutSensitiveData);
  } catch (error) {
    console.error('Error fetching user:', error);
    res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des donn√©es utilisateur" });
  }
});

// Route de d√©connexion
router.post('/logout', (req, res) => {
  try {
    // üç™ SUPPRESSION FORC√âE DU COOKIE - Options IDENTIQUES au login
    const isProd = process.env.NODE_ENV === 'production';
    
    console.log('üö™ [Logout] Clearing auth_token cookie with options:', {
      httpOnly: true,
      secure: isProd,
      sameSite: isProd ? 'none' : 'lax',
      path: '/',
      environment: process.env.NODE_ENV
    });
    
    // M√©thode 1: clearCookie avec les M√äMES options que lors de la cr√©ation
    res.clearCookie('auth_token', {
      httpOnly: true,
      secure: isProd,
      sameSite: isProd ? 'none' : 'lax',
      path: '/',
    });
    
    // M√©thode 2: Double s√©curit√© - Poser un cookie expir√© (fallback)
    res.cookie('auth_token', '', {
      httpOnly: true,
      secure: isProd,
      sameSite: isProd ? 'none' : 'lax',
      path: '/',
      expires: new Date(0), // Cookie expir√© imm√©diatement
      maxAge: 0
    });
    
    console.log('‚úÖ [Logout] Cookie suppression attempted');
    res.status(200).json({ 
      message: "D√©connexion r√©ussie",
      success: true 
    });
  } catch (error) {
    console.error('‚ùå [Logout] Error during logout:', error);
    res.status(500).json({ 
      message: "Erreur lors de la d√©connexion",
      success: false 
    });
  }
});

export default router;

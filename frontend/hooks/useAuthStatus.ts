"use client";

import { useAuth } from '@/contexts/AuthContext';
import { useHasMounted } from '@/lib/clientUtils';

/**
 * üîê HOOK UTILITAIRE POUR L'AUTHENTIFICATION
 * 
 * Simplifie l'usage du context en fournissant des √©tats d√©riv√©s
 * et des m√©thodes de v√©rification optimis√©es.
 * 
 * Usage :
 * const { isReady, canAccess, requiresAuth } = useAuthStatus();
 * 
 * if (!isReady) return <Loading />;
 * if (requiresAuth) return <LoginPrompt />;
 * // Contenu prot√©g√©...
 */
export const useAuthStatus = () => {
  const { user, loading, initialized, isAuthenticated } = useAuth();
  const hasMounted = useHasMounted();

  // üéØ √âTAT CONSOLID√â
  const isReady = hasMounted && initialized && !loading;
  const canAccess = isReady && isAuthenticated;
  const requiresAuth = isReady && !isAuthenticated;
  const isLoading = !hasMounted || !initialized || loading;

  console.log('üîê [useAuthStatus] Status:', {
    isReady,
    canAccess,
    requiresAuth,
    isLoading,
    userId: user?.id,
  });

  return {
    // √âtats principaux
    user,
    isAuthenticated,
    
    // √âtats d√©riv√©s optimis√©s
    isReady,          // ‚úÖ Pr√™t pour render conditionnel
    canAccess,        // ‚úÖ Peut acc√©der au contenu prot√©g√©
    requiresAuth,     // ‚ö†Ô∏è Doit afficher l'√©cran de connexion
    isLoading,        // ‚è≥ Afficher un loader
    
    // √âtats bruts (pour debug)
    raw: {
      hasMounted,
      loading,
      initialized,
      isAuthenticated,
    }
  };
};

/**
 * üõ†Ô∏è HOOK POUR LES COMPOSANTS QUI N'ONT PAS BESOIN D'ATTENDRE
 * 
 * Pour les composants qui peuvent s'afficher m√™me sans auth
 * mais qui ont besoin de conna√Ætre l'√©tat utilisateur.
 * 
 * Usage :
 * const { user, showAuthFeatures } = useOptionalAuth();
 */
export const useOptionalAuth = () => {
  const { user, loading, initialized, isAuthenticated } = useAuth();
  const hasMounted = useHasMounted();

  const showAuthFeatures = hasMounted && initialized && !loading && isAuthenticated;
  const canShowUser = hasMounted && initialized && !loading;

  return {
    user: canShowUser ? user : null,
    isAuthenticated: showAuthFeatures,
    showAuthFeatures,      // ‚úÖ Afficher les fonctionnalit√©s auth
    canShowUser,          // ‚úÖ Peut afficher les infos utilisateur
    isInitialized: hasMounted && initialized && !loading,
  };
};

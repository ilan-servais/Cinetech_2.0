generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  mediaId   Int
  createdAt DateTime @default(now())
  Media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, mediaId])
}

model Friendship {
  id                             Int      @id @default(autoincrement())
  userId                         Int
  friendId                       Int
  createdAt                      DateTime @default(now())
  User_Friendship_friendIdToUser User     @relation("Friendship_friendIdToUser", fields: [friendId], references: [id], onDelete: Cascade)
  User_Friendship_userIdToUser   User     @relation("Friendship_userIdToUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
}

model Media {
  id             Int              @id @default(autoincrement())
  tmdbId         Int              @unique
  type           String
  title          String
  posterPath     String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  Favorite       Favorite[]
  WatchLaterItem WatchLaterItem[]
  WatchedItem    WatchedItem[]
}

model User {
  id                                   Int              @id @default(autoincrement())
  email                                String           @unique
  firstName                            String
  lastName                             String
  hashed_password                      String
  is_verified                          Boolean          @default(false)
  verification_code                    String?
  token_expiration                     DateTime?
  createdAt                            DateTime         @default(now())
  updatedAt                            DateTime
  Favorite                             Favorite[]
  Friendship_Friendship_friendIdToUser Friendship[]     @relation("Friendship_friendIdToUser")
  Friendship_Friendship_userIdToUser   Friendship[]     @relation("Friendship_userIdToUser")
  WatchLaterItem                       WatchLaterItem[]
  WatchedItem                          WatchedItem[]
}

model WatchLaterItem {
  id      Int      @id @default(autoincrement())
  userId  Int
  mediaId Int
  addedAt DateTime @default(now())
  Media   Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  User    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, mediaId])
}

model WatchedItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  mediaId   Int
  watchedAt DateTime @default(now())
  Media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, mediaId])
}

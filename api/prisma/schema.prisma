generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  firstName         String
  lastName          String
  hashed_password   String
  is_verified       Boolean   @default(false)
  verification_token String?
  token_expiration  DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  favorites         Favorite[]
  watchedItems      WatchedItem[]
  watchLaterItems   WatchLaterItem[]
  friendships       Friendship[]   @relation("UserFriends")
  friendOf          Friendship[]   @relation("FriendOf")
}

model Media {
  id            Int              @id @default(autoincrement())
  tmdbId        Int              @unique
  type          String           // "movie" or "tv"
  title         String
  posterPath    String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  favorites     Favorite[]
  watchedItems  WatchedItem[]
  watchLaterItems WatchLaterItem[]
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId   Int
  createdAt DateTime @default(now())
  
  @@unique([userId, mediaId])
}

model WatchedItem {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId   Int
  watchedAt DateTime @default(now())

  @@unique([userId, mediaId])
}

model WatchLaterItem {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId   Int
  addedAt   DateTime @default(now())

  @@unique([userId, mediaId])
}

model Friendship {
  id        Int      @id @default(autoincrement())
  user      User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  friend    User     @relation("FriendOf", fields: [friendId], references: [id], onDelete: Cascade)
  friendId  Int
  createdAt DateTime @default(now())
  @@unique([userId, friendId])
}

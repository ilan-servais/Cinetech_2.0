generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int              @id @default(autoincrement())
  email              String           @unique
  firstName          String
  lastName           String
  hashed_password    String
  is_verified        Boolean          @default(false)
  verification_code  String?
  token_expiration   DateTime?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  favorites          Favorite[]
  friendOf           Friendship[]     @relation("FriendOf")
  friendships        Friendship[]     @relation("UserFriends")
  watchLaterItems    WatchLaterItem[]
  watchedItems       WatchedItem[]
}

model Media {
  id              Int              @id @default(autoincrement())
  tmdbId          Int              @unique
  type            String
  title           String
  posterPath      String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  favorites       Favorite[]
  watchLaterItems WatchLaterItem[]
  watchedItems    WatchedItem[]
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  mediaId   Int
  createdAt DateTime @default(now())
  media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, mediaId])
}

model WatchedItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  mediaId   Int
  watchedAt DateTime @default(now())
  media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, mediaId])
}

model WatchLaterItem {
  id      Int      @id @default(autoincrement())
  userId  Int
  mediaId Int
  addedAt DateTime @default(now())
  media   Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, mediaId])
}

model Friendship {
  id        Int      @id @default(autoincrement())
  userId    Int
  friendId  Int
  createdAt DateTime @default(now())
  friend    User     @relation("FriendOf", fields: [friendId], references: [id], onDelete: Cascade)
  user      User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
}
